package com.book.link.tree;

/**
 * 列举集合 {1,2,3} 中所有子集
 * 回溯法
 *
 * 回溯VS递归
 * 很多人认为回溯和递归是一样的，其实不然。在回溯法中可以看到有递归的身影，但是两者是有区别的。
 *
 * 回溯法从问题本身出发，寻找可能实现的所有情况。和穷举法的思想相近，不同在于穷举法是将所有的情况都列举出来以后再一一筛选，而回溯法在列举过程如果发现当前情况根本不可能存在，就停止后续的所有工作，返回上一步进行新的尝试。
 *
 * 递归是从问题的结果出发，例如求 n！，要想知道 n！的结果，就需要知道 n*(n-1)! 的结果，而要想知道 (n-1)! 结果，就需要提前知道 (n-1)*(n-2)!。这样不断地向自己提问，不断地调用自己的思想就是递归。
 *
 * 回溯和递归唯一的联系就是，回溯法可以用递归思想实现。
 */
public class GetSub {
    //数组中值为1的下标表示集合中的元素
    private static int[] arr = new int[3];

    public static void main(String[] args) {
        sub(0);
    }


    private static void sub(int i) {
        //说明数组的所有下标都有了对应的值，开始判断
        if (i > 2) {
            for (int j = 0; j < arr.length; j++) {
                //如果值为1，说明选取了该下标作为集合中的元素，输出
                if (arr[j] == 1) {
                    System.out.print(j + 1 + "\t");
                }
            }
            System.out.println();
            return;
        }

        //选中该元素，该下标对应的值赋为1，继续向下探索
        arr[i] = 1;
        sub(i + 1);

        //取消选中该元素，该下标的值设为0，继续向下探索
        arr[i] = 0;
        sub(i + 1);
    }
}
